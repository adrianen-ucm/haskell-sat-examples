; Hamiltonian graph
; This script checks if the undirected graph with edges
; 	[(0,1),(1,2),(2,3),(3,4),(4,5),(1,3)]
; has a Hamiltonian path.
; The propositional variable 'pi_j' means that the node i appears in the path position j,
; where nodes are labeled as natural numbers starting from 0.
(declare-const p0_0 Bool)
(declare-const p0_1 Bool)
(declare-const p0_2 Bool)
(declare-const p0_3 Bool)
(declare-const p0_4 Bool)
(declare-const p0_5 Bool)
(declare-const p1_0 Bool)
(declare-const p1_1 Bool)
(declare-const p1_2 Bool)
(declare-const p1_3 Bool)
(declare-const p1_4 Bool)
(declare-const p1_5 Bool)
(declare-const p2_0 Bool)
(declare-const p2_1 Bool)
(declare-const p2_2 Bool)
(declare-const p2_3 Bool)
(declare-const p2_4 Bool)
(declare-const p2_5 Bool)
(declare-const p3_0 Bool)
(declare-const p3_1 Bool)
(declare-const p3_2 Bool)
(declare-const p3_3 Bool)
(declare-const p3_4 Bool)
(declare-const p3_5 Bool)
(declare-const p4_0 Bool)
(declare-const p4_1 Bool)
(declare-const p4_2 Bool)
(declare-const p4_3 Bool)
(declare-const p4_4 Bool)
(declare-const p4_5 Bool)
(declare-const p5_0 Bool)
(declare-const p5_1 Bool)
(declare-const p5_2 Bool)
(declare-const p5_3 Bool)
(declare-const p5_4 Bool)
(declare-const p5_5 Bool)

; Every node should appear in at least one position.
(assert (or p0_0 p0_1 p0_2 p0_3 p0_4 p0_5))
(assert (or p1_0 p1_1 p1_2 p1_3 p1_4 p1_5))
(assert (or p2_0 p2_1 p2_2 p2_3 p2_4 p2_5))
(assert (or p3_0 p3_1 p3_2 p3_3 p3_4 p3_5))
(assert (or p4_0 p4_1 p4_2 p4_3 p4_4 p4_5))
(assert (or p5_0 p5_1 p5_2 p5_3 p5_4 p5_5))

; Two different nodes do not appear in the same path position.
(assert (not (and p0_0 p1_0)))
(assert (not (and p0_1 p1_1)))
(assert (not (and p0_2 p1_2)))
(assert (not (and p0_3 p1_3)))
(assert (not (and p0_4 p1_4)))
(assert (not (and p0_5 p1_5)))
(assert (not (and p0_0 p2_0)))
(assert (not (and p0_1 p2_1)))
(assert (not (and p0_2 p2_2)))
(assert (not (and p0_3 p2_3)))
(assert (not (and p0_4 p2_4)))
(assert (not (and p0_5 p2_5)))
(assert (not (and p0_0 p3_0)))
(assert (not (and p0_1 p3_1)))
(assert (not (and p0_2 p3_2)))
(assert (not (and p0_3 p3_3)))
(assert (not (and p0_4 p3_4)))
(assert (not (and p0_5 p3_5)))
(assert (not (and p0_0 p4_0)))
(assert (not (and p0_1 p4_1)))
(assert (not (and p0_2 p4_2)))
(assert (not (and p0_3 p4_3)))
(assert (not (and p0_4 p4_4)))
(assert (not (and p0_5 p4_5)))
(assert (not (and p0_0 p5_0)))
(assert (not (and p0_1 p5_1)))
(assert (not (and p0_2 p5_2)))
(assert (not (and p0_3 p5_3)))
(assert (not (and p0_4 p5_4)))
(assert (not (and p0_5 p5_5)))
(assert (not (and p1_0 p0_0)))
(assert (not (and p1_1 p0_1)))
(assert (not (and p1_2 p0_2)))
(assert (not (and p1_3 p0_3)))
(assert (not (and p1_4 p0_4)))
(assert (not (and p1_5 p0_5)))
(assert (not (and p1_0 p2_0)))
(assert (not (and p1_1 p2_1)))
(assert (not (and p1_2 p2_2)))
(assert (not (and p1_3 p2_3)))
(assert (not (and p1_4 p2_4)))
(assert (not (and p1_5 p2_5)))
(assert (not (and p1_0 p3_0)))
(assert (not (and p1_1 p3_1)))
(assert (not (and p1_2 p3_2)))
(assert (not (and p1_3 p3_3)))
(assert (not (and p1_4 p3_4)))
(assert (not (and p1_5 p3_5)))
(assert (not (and p1_0 p4_0)))
(assert (not (and p1_1 p4_1)))
(assert (not (and p1_2 p4_2)))
(assert (not (and p1_3 p4_3)))
(assert (not (and p1_4 p4_4)))
(assert (not (and p1_5 p4_5)))
(assert (not (and p1_0 p5_0)))
(assert (not (and p1_1 p5_1)))
(assert (not (and p1_2 p5_2)))
(assert (not (and p1_3 p5_3)))
(assert (not (and p1_4 p5_4)))
(assert (not (and p1_5 p5_5)))
(assert (not (and p2_0 p0_0)))
(assert (not (and p2_1 p0_1)))
(assert (not (and p2_2 p0_2)))
(assert (not (and p2_3 p0_3)))
(assert (not (and p2_4 p0_4)))
(assert (not (and p2_5 p0_5)))
(assert (not (and p2_0 p1_0)))
(assert (not (and p2_1 p1_1)))
(assert (not (and p2_2 p1_2)))
(assert (not (and p2_3 p1_3)))
(assert (not (and p2_4 p1_4)))
(assert (not (and p2_5 p1_5)))
(assert (not (and p2_0 p3_0)))
(assert (not (and p2_1 p3_1)))
(assert (not (and p2_2 p3_2)))
(assert (not (and p2_3 p3_3)))
(assert (not (and p2_4 p3_4)))
(assert (not (and p2_5 p3_5)))
(assert (not (and p2_0 p4_0)))
(assert (not (and p2_1 p4_1)))
(assert (not (and p2_2 p4_2)))
(assert (not (and p2_3 p4_3)))
(assert (not (and p2_4 p4_4)))
(assert (not (and p2_5 p4_5)))
(assert (not (and p2_0 p5_0)))
(assert (not (and p2_1 p5_1)))
(assert (not (and p2_2 p5_2)))
(assert (not (and p2_3 p5_3)))
(assert (not (and p2_4 p5_4)))
(assert (not (and p2_5 p5_5)))
(assert (not (and p3_0 p0_0)))
(assert (not (and p3_1 p0_1)))
(assert (not (and p3_2 p0_2)))
(assert (not (and p3_3 p0_3)))
(assert (not (and p3_4 p0_4)))
(assert (not (and p3_5 p0_5)))
(assert (not (and p3_0 p1_0)))
(assert (not (and p3_1 p1_1)))
(assert (not (and p3_2 p1_2)))
(assert (not (and p3_3 p1_3)))
(assert (not (and p3_4 p1_4)))
(assert (not (and p3_5 p1_5)))
(assert (not (and p3_0 p2_0)))
(assert (not (and p3_1 p2_1)))
(assert (not (and p3_2 p2_2)))
(assert (not (and p3_3 p2_3)))
(assert (not (and p3_4 p2_4)))
(assert (not (and p3_5 p2_5)))
(assert (not (and p3_0 p4_0)))
(assert (not (and p3_1 p4_1)))
(assert (not (and p3_2 p4_2)))
(assert (not (and p3_3 p4_3)))
(assert (not (and p3_4 p4_4)))
(assert (not (and p3_5 p4_5)))
(assert (not (and p3_0 p5_0)))
(assert (not (and p3_1 p5_1)))
(assert (not (and p3_2 p5_2)))
(assert (not (and p3_3 p5_3)))
(assert (not (and p3_4 p5_4)))
(assert (not (and p3_5 p5_5)))
(assert (not (and p4_0 p0_0)))
(assert (not (and p4_1 p0_1)))
(assert (not (and p4_2 p0_2)))
(assert (not (and p4_3 p0_3)))
(assert (not (and p4_4 p0_4)))
(assert (not (and p4_5 p0_5)))
(assert (not (and p4_0 p1_0)))
(assert (not (and p4_1 p1_1)))
(assert (not (and p4_2 p1_2)))
(assert (not (and p4_3 p1_3)))
(assert (not (and p4_4 p1_4)))
(assert (not (and p4_5 p1_5)))
(assert (not (and p4_0 p2_0)))
(assert (not (and p4_1 p2_1)))
(assert (not (and p4_2 p2_2)))
(assert (not (and p4_3 p2_3)))
(assert (not (and p4_4 p2_4)))
(assert (not (and p4_5 p2_5)))
(assert (not (and p4_0 p3_0)))
(assert (not (and p4_1 p3_1)))
(assert (not (and p4_2 p3_2)))
(assert (not (and p4_3 p3_3)))
(assert (not (and p4_4 p3_4)))
(assert (not (and p4_5 p3_5)))
(assert (not (and p4_0 p5_0)))
(assert (not (and p4_1 p5_1)))
(assert (not (and p4_2 p5_2)))
(assert (not (and p4_3 p5_3)))
(assert (not (and p4_4 p5_4)))
(assert (not (and p4_5 p5_5)))
(assert (not (and p5_0 p0_0)))
(assert (not (and p5_1 p0_1)))
(assert (not (and p5_2 p0_2)))
(assert (not (and p5_3 p0_3)))
(assert (not (and p5_4 p0_4)))
(assert (not (and p5_5 p0_5)))
(assert (not (and p5_0 p1_0)))
(assert (not (and p5_1 p1_1)))
(assert (not (and p5_2 p1_2)))
(assert (not (and p5_3 p1_3)))
(assert (not (and p5_4 p1_4)))
(assert (not (and p5_5 p1_5)))
(assert (not (and p5_0 p2_0)))
(assert (not (and p5_1 p2_1)))
(assert (not (and p5_2 p2_2)))
(assert (not (and p5_3 p2_3)))
(assert (not (and p5_4 p2_4)))
(assert (not (and p5_5 p2_5)))
(assert (not (and p5_0 p3_0)))
(assert (not (and p5_1 p3_1)))
(assert (not (and p5_2 p3_2)))
(assert (not (and p5_3 p3_3)))
(assert (not (and p5_4 p3_4)))
(assert (not (and p5_5 p3_5)))
(assert (not (and p5_0 p4_0)))
(assert (not (and p5_1 p4_1)))
(assert (not (and p5_2 p4_2)))
(assert (not (and p5_3 p4_3)))
(assert (not (and p5_4 p4_4)))
(assert (not (and p5_5 p4_5)))

; If two nodes are not adjacent, then they do not appear consecutively in the path.
(assert (=> p0_0 (not p2_1)))
(assert (=> p0_1 (not p2_2)))
(assert (=> p0_2 (not p2_3)))
(assert (=> p0_3 (not p2_4)))
(assert (=> p0_4 (not p2_5)))
(assert (=> p0_0 (not p3_1)))
(assert (=> p0_1 (not p3_2)))
(assert (=> p0_2 (not p3_3)))
(assert (=> p0_3 (not p3_4)))
(assert (=> p0_4 (not p3_5)))
(assert (=> p0_0 (not p4_1)))
(assert (=> p0_1 (not p4_2)))
(assert (=> p0_2 (not p4_3)))
(assert (=> p0_3 (not p4_4)))
(assert (=> p0_4 (not p4_5)))
(assert (=> p0_0 (not p5_1)))
(assert (=> p0_1 (not p5_2)))
(assert (=> p0_2 (not p5_3)))
(assert (=> p0_3 (not p5_4)))
(assert (=> p0_4 (not p5_5)))
(assert (=> p1_0 (not p4_1)))
(assert (=> p1_1 (not p4_2)))
(assert (=> p1_2 (not p4_3)))
(assert (=> p1_3 (not p4_4)))
(assert (=> p1_4 (not p4_5)))
(assert (=> p1_0 (not p5_1)))
(assert (=> p1_1 (not p5_2)))
(assert (=> p1_2 (not p5_3)))
(assert (=> p1_3 (not p5_4)))
(assert (=> p1_4 (not p5_5)))
(assert (=> p2_0 (not p0_1)))
(assert (=> p2_1 (not p0_2)))
(assert (=> p2_2 (not p0_3)))
(assert (=> p2_3 (not p0_4)))
(assert (=> p2_4 (not p0_5)))
(assert (=> p2_0 (not p4_1)))
(assert (=> p2_1 (not p4_2)))
(assert (=> p2_2 (not p4_3)))
(assert (=> p2_3 (not p4_4)))
(assert (=> p2_4 (not p4_5)))
(assert (=> p2_0 (not p5_1)))
(assert (=> p2_1 (not p5_2)))
(assert (=> p2_2 (not p5_3)))
(assert (=> p2_3 (not p5_4)))
(assert (=> p2_4 (not p5_5)))
(assert (=> p3_0 (not p0_1)))
(assert (=> p3_1 (not p0_2)))
(assert (=> p3_2 (not p0_3)))
(assert (=> p3_3 (not p0_4)))
(assert (=> p3_4 (not p0_5)))
(assert (=> p3_0 (not p5_1)))
(assert (=> p3_1 (not p5_2)))
(assert (=> p3_2 (not p5_3)))
(assert (=> p3_3 (not p5_4)))
(assert (=> p3_4 (not p5_5)))
(assert (=> p4_0 (not p0_1)))
(assert (=> p4_1 (not p0_2)))
(assert (=> p4_2 (not p0_3)))
(assert (=> p4_3 (not p0_4)))
(assert (=> p4_4 (not p0_5)))
(assert (=> p4_0 (not p1_1)))
(assert (=> p4_1 (not p1_2)))
(assert (=> p4_2 (not p1_3)))
(assert (=> p4_3 (not p1_4)))
(assert (=> p4_4 (not p1_5)))
(assert (=> p4_0 (not p2_1)))
(assert (=> p4_1 (not p2_2)))
(assert (=> p4_2 (not p2_3)))
(assert (=> p4_3 (not p2_4)))
(assert (=> p4_4 (not p2_5)))
(assert (=> p5_0 (not p0_1)))
(assert (=> p5_1 (not p0_2)))
(assert (=> p5_2 (not p0_3)))
(assert (=> p5_3 (not p0_4)))
(assert (=> p5_4 (not p0_5)))
(assert (=> p5_0 (not p1_1)))
(assert (=> p5_1 (not p1_2)))
(assert (=> p5_2 (not p1_3)))
(assert (=> p5_3 (not p1_4)))
(assert (=> p5_4 (not p1_5)))
(assert (=> p5_0 (not p2_1)))
(assert (=> p5_1 (not p2_2)))
(assert (=> p5_2 (not p2_3)))
(assert (=> p5_3 (not p2_4)))
(assert (=> p5_4 (not p2_5)))
(assert (=> p5_0 (not p3_1)))
(assert (=> p5_1 (not p3_2)))
(assert (=> p5_2 (not p3_3)))
(assert (=> p5_3 (not p3_4)))
(assert (=> p5_4 (not p3_5)))

(check-sat)
(get-model)

