; Graph coloring
; This script checks if the graph with edges
; 	[(0,1),(1,2),(2,3),(3,4),(4,5),(5,1),(1,4),(2,4)]
; can be colored with 3 colors with adjacent nodes not sharing color.
; The propositional variable 'pi_j' means that the node i is colored with j,
; where nodes and colors are labeled as natural numbers starting from 0.
(declare-const p0_0 Bool)
(declare-const p0_1 Bool)
(declare-const p0_2 Bool)
(declare-const p1_0 Bool)
(declare-const p1_1 Bool)
(declare-const p1_2 Bool)
(declare-const p2_0 Bool)
(declare-const p2_1 Bool)
(declare-const p2_2 Bool)
(declare-const p3_0 Bool)
(declare-const p3_1 Bool)
(declare-const p3_2 Bool)
(declare-const p4_0 Bool)
(declare-const p4_1 Bool)
(declare-const p4_2 Bool)
(declare-const p5_0 Bool)
(declare-const p5_1 Bool)
(declare-const p5_2 Bool)

; Every node should have a color.
(assert (or p0_0 p0_1 p0_2))
(assert (or p1_0 p1_1 p1_2))
(assert (or p2_0 p2_1 p2_2))
(assert (or p3_0 p3_1 p3_2))
(assert (or p4_0 p4_1 p4_2))
(assert (or p5_0 p5_1 p5_2))

; If some node has a color, then it has no other color.
(assert (=> p0_0 (and (not p0_1) (not p0_2))))
(assert (=> p0_1 (and (not p0_0) (not p0_2))))
(assert (=> p0_2 (and (not p0_0) (not p0_1))))
(assert (=> p1_0 (and (not p1_1) (not p1_2))))
(assert (=> p1_1 (and (not p1_0) (not p1_2))))
(assert (=> p1_2 (and (not p1_0) (not p1_1))))
(assert (=> p2_0 (and (not p2_1) (not p2_2))))
(assert (=> p2_1 (and (not p2_0) (not p2_2))))
(assert (=> p2_2 (and (not p2_0) (not p2_1))))
(assert (=> p3_0 (and (not p3_1) (not p3_2))))
(assert (=> p3_1 (and (not p3_0) (not p3_2))))
(assert (=> p3_2 (and (not p3_0) (not p3_1))))
(assert (=> p4_0 (and (not p4_1) (not p4_2))))
(assert (=> p4_1 (and (not p4_0) (not p4_2))))
(assert (=> p4_2 (and (not p4_0) (not p4_1))))
(assert (=> p5_0 (and (not p5_1) (not p5_2))))
(assert (=> p5_1 (and (not p5_0) (not p5_2))))
(assert (=> p5_2 (and (not p5_0) (not p5_1))))

; If some node has a color, then no one of its neighbours has the same color.
(assert (=> p0_0 (not p1_0)))
(assert (=> p0_1 (not p1_1)))
(assert (=> p0_2 (not p1_2)))
(assert (=> p1_0 (not p2_0)))
(assert (=> p1_1 (not p2_1)))
(assert (=> p1_2 (not p2_2)))
(assert (=> p2_0 (not p3_0)))
(assert (=> p2_1 (not p3_1)))
(assert (=> p2_2 (not p3_2)))
(assert (=> p3_0 (not p4_0)))
(assert (=> p3_1 (not p4_1)))
(assert (=> p3_2 (not p4_2)))
(assert (=> p4_0 (not p5_0)))
(assert (=> p4_1 (not p5_1)))
(assert (=> p4_2 (not p5_2)))
(assert (=> p5_0 (not p1_0)))
(assert (=> p5_1 (not p1_1)))
(assert (=> p5_2 (not p1_2)))
(assert (=> p1_0 (not p4_0)))
(assert (=> p1_1 (not p4_1)))
(assert (=> p1_2 (not p4_2)))
(assert (=> p2_0 (not p4_0)))
(assert (=> p2_1 (not p4_1)))
(assert (=> p2_2 (not p4_2)))

(check-sat)
(get-model)

